#
# Copyright (c) 2020 Mario Aichinger <aichingm@gmail.com>
#

PACKAGE = @PACKAGE@
VERSION = @VERSION@

MODULE_NAME = @MODULE_NAME@
HELPER_NAME = @HELPER_NAME@
PROCESS_GROUP = @PROCESS_GROUP@
USER_GROUP = @USER_GROUP@
DEBUGGING = @DEBUGGING@
PREFIX = @prefix@

PREFIX_BIN = $(PREFIX)/
PREFIX_LIB = /usr/
SERVICE_DIR = /etc/pam.d/
TEST_SERVICE = $(MODULE_NAME)-test-service

EXPAND=
CC ?= gcc
#-Wconversion -Wsign-conversion a lot warnings
CFLAGS = -O -W -Werror -Wall -Wextra -Wbad-function-cast -Wcast-align \
		-Wcast-qual -Wmissing-declarations -Wmissing-prototypes \
		-Wpointer-arith -Wreturn-type -Wstrict-prototypes \
		-Wwrite-strings -Winline -Wshadow -Wformat-security \
		$(CFLAGS_SEC) $(EXPAND)
#-mfunction-return=thunk -mindirect-branch=thunk incompatible with -fcf-protection
CFLAGS_SEC = -fstack-protector-all -Wstack-protector --param ssp-buffer-size=4 \
		-fstack-clash-protection -fPIC -ftrapv -D_FORTIFY_SOURCE=2
#-fvtable-verify=std is not supported in this configuration
#-Wl,-nxcompat cannot open linker script file ompat: No such file or directory
LDFLAGS = @LIBCRYPT@ @LIBAUDIT@ @LIBSELINUX@ @LIBECONF@ -Wl,-z,relro,-z,now -Wl,-z,noexecstack \
		-fcf-protection=full -Wl,-dynamicbase
MODULE_DEFS = -DBUILDING_MODULE -DPREFIX=\"$(PREFIX)\"
HELPER_DEFS = -DBUILDING_HELPER -DPREFIX=\"$(PREFIX)\"


ARTIFACTS = $(MODULE_NAME) $(HELPER_NAME)

PAM_UNIX_OTHERS_objs = pam_unix_auth.o bigcrypt.o support.o passverify.o \
			md5_good.o md5_broken.o log.o
CKPWD_objs =  log.hlpr.o md5_good.hlpr.o md5_broken.hlpr.o bigcrypt.hlpr.o \
			passverify.hlpr.o unix_chkpwd.hlpr.o

.PHONY: all clean clean-soft clean-hard artifacts defchklist deflist \
ac_headers_list easy-rebuild install uninstall install-groups \
prepare-artifacts install-test-setuid install-test install-test-service \
install-test-user uninstall-groups uninstall-test-service uninstall-test-user \
my-privilege remove-my-privilege me-allowed remove-me-allowed root graphs

all: artifacts

clean:
	rm -rf *.o **/*.o *.hlpr.o **/*.hlpr.o $(ARTIFACTS) graph_$(MODULE_NAME).pdf graph_$(HELPER_NAME).pdf

clean-soft: clean
	rm -rf autom4te.cache aclocal.m4 config.log config.status ABOUT-NLS \
	config.rpath config.h.in~

clean-hard: clean-soft
	rm -rf tools Makefile configure config.h

artifacts: $(ARTIFACTS)

$(HELPER_NAME): $(CKPWD_objs)
	$(CC) $(CFLAGS) $(LDFLAGS) -o $@ $^

$(MODULE_NAME): $(PAM_UNIX_OTHERS_objs)
	$(CC) -shared -Wl,-soname,$(MODULE_NAME) $(LDFLAGS) -o $@ $^

pam_unix_auth.o: pam_unix_auth.c
	$(CC) $(CFLAGS) $(LDFLAGS) $(MODULE_DEFS) -c $^ -o $@

%.o: %.c
	$(CC) $(CFLAGS) $(LDFLAGS) $(MODULE_DEFS) -c -o $@ $<

%.hlpr.o: %.c
	$(CC) $(CFLAGS) $(LDFLAGS) $(HELPER_DEFS) -c -o $@ $<

GREP_C_H_NOFILE = --no-filename --include="*.c" --include="*.h"
defchklist:
	@grep "#ifdef" .        -R $(GREP_C_H_NOFILE) | sort | uniq
	@grep "#if defined" .   -R $(GREP_C_H_NOFILE) | sort | uniq
	@grep "#elif defined" . -R $(GREP_C_H_NOFILE) | sort | uniq
	@grep "#elifdef" .      -R $(GREP_C_H_NOFILE) | sort | uniq
	@grep "#ifndef" .       -R $(GREP_C_H_NOFILE) | sort | uniq
	@grep "#if not def" .   -R $(GREP_C_H_NOFILE) | sort | uniq
	@grep "#elifndef" .     -R $(GREP_C_H_NOFILE) | sort | uniq
	@grep "#elif not def" . -R $(GREP_C_H_NOFILE) | sort | uniq

deflist:
	@grep "#define" . -R $(GREP_C_H_NOFILE) | sort | uniq

ac_headers_list:
	@grep --regexp "#include <.*" . -R --only-matching $(GREP_C_H_NOFILE) |\
		sort | uniq | sed "s/^#include </AC_CHECK_HEADERS(/g"|\
		sed "s/>$$/)/g"

easy-rebuild: clean-hard
	./autogen.sh && ./configure
	$(MAKE) clean-soft

install: artifacts
	mkdir -p $(PREFIX_BIN)bin/
	mkdir -p $(PREFIX_LIB)lib/security/
	cp $(HELPER_NAME) $(PREFIX_BIN)bin/
	cp $(MODULE_NAME) $(PREFIX_LIB)lib/security/

uninstall: root
	rm $(PREFIX_BIN)bin/$(HELPER_NAME)
	rm $(PREFIX_LIB)lib/security/$(MODULE_NAME)

install-groups: root
	groupadd --force $(USER_GROUP)
	groupadd --force $(PROCESS_GROUP)

prepare-artifacts: artifacts
	chgrp $(PROCESS_GROUP) $(HELPER_NAME)
	chmod +s $(HELPER_NAME)

install-test-setuid: root
	chgrp $(PROCESS_GROUP) $(PREFIX_BIN)bin/$(HELPER_NAME)
	chmod +s $(PREFIX_BIN)bin/$(HELPER_NAME)

install-test: install-groups install install-test-setuid install-test-service

install-test-service: root
	echo "#%PAM-1.0" > $(SERVICE_DIR)$(TEST_SERVICE)
	echo "auth required $(MODULE_NAME) try_first_pass nullok audit" >>\
		$(SERVICE_DIR)$(TEST_SERVICE)

install-test-user: root
	useradd -M -N -r test_puo


uninstall-groups: root
	groupdel $(USER_GROUP)
	groupdel $(PROCESS_GROUP)

uninstall-test-service: root
	rm $(SERVICE_DIR)$(TEST_SERVICE)

uninstall-test-user: root
	userdel test_puo

my-privilege:
	sudo usermod -a -G $(PROCESS_GROUP) $$(id -u --name)

remove-my-privilege:
	sudo gpasswd -d $$(id -u --name) $(PROCESS_GROUP)

me-allowed:
	sudo usermod -a -G $(USER_GROUP) $$(id -u --name)

remove-me-allowed:
	sudo gpasswd -d $$(id -u --name) $(USER_GROUP)

root:
	@[[ $$(id -u) -eq "0" ]] || (echo -e "\e[01;31mYou Need To Be Root!\e[0m" && exit 1)

graphs: clean
	make $(MODULE_NAME) EXPAND=-fdump-rtl-expand
	egypt --omit log_msg,debug *.233r.expand | dot -Tpdf -o graph_$(MODULE_NAME).pdf
	rm *.233r.expand
	make $(HELPER_NAME) EXPAND=-fdump-rtl-expand
	egypt --omit log_msg,debug *.233r.expand | dot -Tpdf -o graph_$(HELPER_NAME).pdf
	rm *.233r.expand
